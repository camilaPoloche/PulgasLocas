/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package autonoma.pulgaslocas.gui;

import autonoma.pulgasLocasBase.elements.GraphicContainer;
import autonoma.pulgaslocas.elements.Montana;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * Modelo que permite representar la VentanaPrincipal 
 * @author Camila
 * @since 20250506
 * @version 1.0
*/

public class GameWindow extends javax.swing.JFrame implements GraphicContainer{
    //Atributos
    /**
    * Instancia de Montana
    */
    private Montana montana;
    /**
    * bandera para verificar si el juego se acabo o no
    */
    private boolean terminado = false;
    
    /**
     * Inicializa los atributos de la clase GameWindow
     * @param montana
    */    
    public GameWindow(Montana montana){
        this.montana = montana;
        initComponents();
    }
    
    /**
     * Metodo para cerrar la GameWindow
    */
    private void exitGame(){
        System.exit(0);
    }
    
    /**
     * Modifica la instancia de montana
     * @param montana
    */
    public void setMontana(Montana montana) {
        this.montana = montana;
    }
    
    /**
     * Reinicia el juego en caso de que el usuario lo desee
    */
    public void reiniciar () throws IOException{
        String opcion;
        do{
            JOptionPane.showMessageDialog(null, "Ganaste!! Tu puntaje fue: " + this.montana.getPuntaje());
            opcion = JOptionPane.showInputDialog(null, "Deseas reiniciar el juego? 1) si 2) no ");
        } while (!"1".equals(opcion) && !"2".equals(opcion));
        
        
        if ("1".equals(opcion)){
            this.montana.reiniciarJuego();
        } else if ("2".equals(opcion)){
            this.dispose();
        }
    }

    /**
     * Metodo que dibuja sobre la GameWindow
     * @param g
    */
    @Override
    public void paint(Graphics g) {
       super.paint(g); 
       montana.paint(g);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelPrincipal = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout panelPrincipalLayout = new javax.swing.GroupLayout(panelPrincipal);
        panelPrincipal.setLayout(panelPrincipalLayout);
        panelPrincipalLayout.setHorizontalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 388, Short.MAX_VALUE)
        );
        panelPrincipalLayout.setVerticalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Evento del teclado - KeyPressed
     * @param evt
    */
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        switch(evt.getKeyCode())
        {   
            case KeyEvent.VK_P:
                try {
                    montana.handleKey(evt);
                } catch (IOException e) {
                    System.out.println("Error obteniendo informacion del archivo");
                }
                
            break;

            case KeyEvent.VK_M:
                try {
                    montana.handleKey(evt);
                } catch (IOException e) {
                    System.out.println("Error obteniendo informacion del archivo");
                }
                
            break;

            case KeyEvent.VK_Q:
                exitGame();
            break;
            
            case KeyEvent.VK_S:
                try {
                    montana.handleKey(evt);
                } catch (IOException e) {
                    System.out.println("Error obteniendo informacion del archivo");
                }
                
            case KeyEvent.VK_SPACE:                
                try {
                    montana.handleKey(evt);
                } catch (IOException e) {
                    System.out.println("Error obteniendo informacion del archivo");
                }
        }
        repaint();
    }//GEN-LAST:event_formKeyPressed
    /**
     * Evento del mouse - MouseClicked
     * @param evt
    */
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1) {  
            int x = evt.getX();
            int y = evt.getY();
            try{
                this.montana.asesinarPulgasPulguipium(evt.getX(), evt.getY());;
            } catch (IOException ev){
                System.out.println("Error obteniendo informacion del archivo");
            }
        }
        
        if (!terminado && montana.getSprites().isEmpty()) {
            terminado = true;
            try { 
                reiniciar();
            } catch (IOException ex) {
                System.out.println("Error reiniciando el juego");
            }
        }

        refresh();
    }//GEN-LAST:event_formMouseClicked

    /**
     * Metodo que actualiza los objetos sobre la GameWindow
    */
    @Override
    public void refresh() {
        this.repaint();
    }

    /**
     * Retorna las medidas del GameWindow
     * @return Rectangle
    */
    @Override
    public Rectangle getBoundaries() {
        return this.getBounds();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panelPrincipal;
    // End of variables declaration//GEN-END:variables
}
